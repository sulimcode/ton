import React, { createContext, useState, useContext, ReactNode } from 'react';
import { translations } from '../locales/translations';

// –¢–∏–ø—ã —è–∑—ã–∫–æ–≤ (12 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –º–∏—Ä–∞)
export type Language = 
  | 'en' // English
  | 'zh' // Chinese (Mandarin)
  | 'hi' // Hindi
  | 'es' // Spanish
  | 'fr' // French
  | 'ar' // Arabic
  | 'bn' // Bengali
  | 'ru' // Russian
  | 'pt' // Portuguese
  | 'id' // Indonesian
  | 'ur' // Urdu
  | 'de'; // German

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —è–∑—ã–∫–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
export const languageInfo: Record<Language, { name: string, nativeName: string, flag: string }> = {
  'en': { name: 'English', nativeName: 'English', flag: 'üá¨üáß' },
  'zh': { name: 'Chinese', nativeName: '‰∏≠Êñá', flag: 'üá®üá≥' },
  'hi': { name: 'Hindi', nativeName: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä', flag: 'üáÆüá≥' },
  'es': { name: 'Spanish', nativeName: 'Espa√±ol', flag: 'üá™üá∏' },
  'fr': { name: 'French', nativeName: 'Fran√ßais', flag: 'üá´üá∑' },
  'ar': { name: 'Arabic', nativeName: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©', flag: 'üá∏üá¶' },
  'bn': { name: 'Bengali', nativeName: '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ', flag: 'üáßüá©' },
  'ru': { name: 'Russian', nativeName: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
  'pt': { name: 'Portuguese', nativeName: 'Portugu√™s', flag: 'üáµüáπ' },
  'id': { name: 'Indonesian', nativeName: 'Indonesia', flag: 'üáÆüá©' },
  'ur': { name: 'Urdu', nativeName: 'ÿßÿ±ÿØŸà', flag: 'üáµüá∞' },
  'de': { name: 'German', nativeName: 'Deutsch', flag: 'üá©üá™' }
};

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
interface LanguageContextType {
  language: Language;
  setLanguage: (lang: Language) => void;
  t: (key: string) => string; // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
  languageInfo: typeof languageInfo;
}

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è–∑—ã–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
async function saveUserLanguagePreference(language: Language) {
  try {
    await fetch('/api/preferences/language', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ language }),
    });
    console.log('Language preference saved on server');
  } catch (error) {
    console.error('Error saving language preference:', error);
    // –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É, –≤—Å—ë —Ä–∞–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
  }
}

export const LanguageProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —è–∑—ã–∫ –∏–∑ localStorage –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 'en' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const [language, setLanguage] = useState<Language>(() => {
    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –∏–∑ localStorage
    const savedLanguage = localStorage.getItem('prayer-app-language');
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (savedLanguage && savedLanguage in languageInfo) {
      return savedLanguage as Language;
    }
    
    // –ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ –±—Ä–∞—É–∑–µ—Ä–∞
    try {
      const browserLang = navigator.language.split('-')[0];
      if (browserLang in languageInfo) {
        return browserLang as Language;
      }
    } catch (e) {
      console.error('Error detecting browser language:', e);
    }
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π
    return 'ru';
  });

  // –ü—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞
  React.useEffect(() => {
    const fetchLanguageFromServer = async () => {
      try {
        const response = await fetch('/api/preferences', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
        });
        const data = await response.json();
        
        if (data && data.language && data.language in languageInfo) {
          setLanguage(data.language as Language);
        }
      } catch (error) {
        console.log('Using local language preference');
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É –∏—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –∏–∑ localStorage
      }
    };
    
    fetchLanguageFromServer();
  }, []);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
  React.useEffect(() => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    localStorage.setItem('prayer-app-language', language);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    saveUserLanguagePreference(language);
  }, [language]);

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
  const t = (key: string): string => {
    if (!translations[language][key]) {
      console.warn(`Translation key "${key}" not found for language ${language}`);
      // –í–µ—Ä–Ω–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –µ—Å–ª–∏ –Ω–µ—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
      return translations['en'][key] || key;
    }
    return translations[language][key];
  };

  return (
    <LanguageContext.Provider value={{ language, setLanguage, t, languageInfo }}>
      {children}
    </LanguageContext.Provider>
  );
};

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const useLanguage = (): LanguageContextType => {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};